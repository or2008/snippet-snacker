{
  "name": "snippet-snacker",
  "publisher": "or2008",
  "displayName": "Snippet Snacker",
  "description": "Quickly copy code snippets with file paths or grab content from all open files.",
  "version": "0.0.5",
  "engines": {
    "vscode": ">=1.99.3"
  },
  "categories": [
    "Snippets",
    "Other"
  ],
  "icon": "assets/logo.webp",
  "repository": {
    "type": "git",
    "url": "https://github.com/or2008/snippet-snacker"
  },
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "snippetSnacker.copySelectionWithPath",
        "title": "Snippet Snacker: Copy Selection with Path & Lines",
        "category": "Snippet Snacker"
      },
      {
        "command": "snippetSnacker.copyAllOpenFiles",
        "title": "Snippet Snacker: Copy All Open Files with Paths",
        "category": "Snippet Snacker"
      },
      {
        "command": "snippetSnacker.copyProjectStructure",
        "title": "Snippet Snacker: Copy Project Structure Tree",
        "category": "Snippet Snacker"
      },
      {
        "command": "snippetSnacker.bundleSelectedFiles",
        "title": "Snippet Snacker: Bundle Selected Files for LLM",
        "category": "Snippet Snacker"
      },
      {
        "command": "snippetSnacker.copySelectionWithProblems",
        "title": "Snippet Snacker: Copy Selection with Problems",
        "category": "Snippet Snacker"
      },
      {
        "command": "snippetSnacker.copySelectionWithImports",
        "title": "Snippet Snacker: Copy Selection with Imports (File)",
        "category": "Snippet Snacker"
      }
    ],
    "submenus": [
      {
        "id": "snippetSnackerSubmenu",
        "label": "Snippet Snacker"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "submenu": "snippetSnackerSubmenu",
          "group": "9_cutcopypaste@1",
          "when": "editorTextFocus"
        }
      ],
      "snippetSnackerSubmenu": [
        {
          "command": "snippetSnacker.copySelectionWithPath",
          "when": "editorHasSelection"
        },
        {
          "command": "snippetSnacker.copySelectionWithImports",
          "when": "editorHasSelection"
        },
        {
          "command": "snippetSnacker.copySelectionWithProblems",
          "when": "editorHasSelection"
        },
        {
          "command": "snippetSnacker.copyAllOpenFiles",
          "when": "editorIsOpen"
        },
        {
          "command": "snippetSnacker.copyProjectStructure",
          "when": "workspaceFolder"
        }
      ],
      "explorer/context": [
        {
          "command": "snippetSnacker.bundleSelectedFiles",
          "when": "!explorerResourceIsFolder"
        },
        {
          "command": "snippetSnacker.copyProjectStructure",
          "when": "explorerResourceIsFolder"
        }
      ],
      "commandPalette": [
        {
          "command": "snippetSnacker.copyProjectStructure",
          "when": "workspaceFolder"
        },
        {
          "command": "snippetSnacker.copyAllOpenFiles",
          "when": "editorIsOpen"
        }
      ]
    },
    "codeActions": [
      {
        "languages": [
          "*"
        ],
        "providedCodeActionKinds": [
          "RefactorExtract",
          "Refactor"
        ]
      }
    ],
    "configuration": {
      "title": "Snippet Snacker",
      "properties": {
        "snippetSnacker.projectStructure.excludePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/node_modules/**",
            "**/.git/**",
            "**/dist/**",
            "**/build/**",
            "**/out/**",
            "**/.vscode/**"
          ],
          "description": "Glob patterns for folders/files to exclude when generating the project structure tree. Applied after .gitignore filtering if enabled."
        },
        "snippetSnacker.projectStructure.useGitignore": {
          "type": "boolean",
          "default": true,
          "description": "Whether to respect .gitignore rules when generating the project structure (relies on VS Code's default findFiles behavior)."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "vscode:publish": "npm run vscode:prepublish && vsce package && vsce publish",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "1.99.1",
    "@types/mocha": "10.0.10",
    "@types/node": "20.17.31",
    "@typescript-eslint/eslint-plugin": "8.31.0",
    "@typescript-eslint/parser": "8.31.0",
    "eslint": "9.25.1",
    "typescript": "5.8.3",
    "@vscode/test-cli": "0.0.10",
    "@vscode/test-electron": "2.5.2"
  }
}